{
	"info": {
		"_postman_id": "5458c110-ae24-4923-a550-124ba03db334",
		"name": "Pet APP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26515196",
		"_collection_link": "https://winter-capsule-961230.postman.co/workspace/PetAPP~e0154e69-af3a-487d-8968-bab0e91b9d45/collection/26515196-5458c110-ae24-4923-a550-124ba03db334?action=share&source=collection_link&creator=26515196"
	},
	"item": [
		{
			"name": "Sign in Admin",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"Admin_signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"Admin_signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"annsherry+Admin2@agilecybersolutions.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('Admin_refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"{{Admin_signinOTP}}\",\r\n    \"token\": \"{{Admin_signinToken}}\",\r\n    \"device_id\": \"30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('Admin_refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Admin_refresh_token}}\",\r\n    \"device_id\": \"30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign in Customer",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"akileswari+customer2@agilecyber.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"{{signinOTP}}\",\r\n    \"token\": \"{{signinToken}}\",\r\n    \"device_id\": \"300\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{refresh_token}}\",\r\n    \"device_id\": \"300\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign in staff",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"Staff_signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"Staff_signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"akileswari+staff@agilecyber.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('Staff_refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"{{Staff_signinOTP}}\",\r\n    \"token\": \"{{Staff_signinToken}}\",\r\n    \"device_id\": \"30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('Staff_refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Staff_refresh_token}}\",\r\n    \"device_id\": \"30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Menu",
			"item": [
				{
					"name": "User menu list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Staff Menu",
			"item": [
				{
					"name": "Staff menu list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Menu",
			"item": [
				{
					"name": "Admin menu list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Benfeciary subtype",
			"item": [
				{
					"name": "beneficiary_subtype list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype_ID\", responseJson.data[0][\"id\"]);\r",
									"//postman.setEnvironmentVariable(\"beneficiary_subtype\", responseJson.data[1][\"name\"]);\r",
									"\r",
									"// Assuming responseJson.data is an array containing objects with a \"name\" field\r",
									"const randomIndex = Math.floor(Math.random() * responseJson.data.length); // Get a random index within the array length\r",
									"const randomName = responseJson.data[randomIndex][\"name\"]; // Get the \"name\" from the randomly selected index\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype\", randomName); // Set the random name to the environment variable\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/beneficiary_subtype",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary_subtype"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Organisational Settings",
			"item": [
				{
					"name": "Form structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/user/form-structure/fields/organization_settings",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form-structure",
								"fields",
								"organization_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoice List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Get the data array containing IDs\r",
									"const responseData = responseJson.data;\r",
									"\r",
									"// Generate a random index within the array length\r",
									"const randomIndex = Math.floor(Math.random() * responseData.length);\r",
									"\r",
									"// Get the random ID from the randomly selected index\r",
									"const randomId = responseData[randomIndex].id;\r",
									"\r",
									"// Set the random ID as an environment variable named \"random_id\"\r",
									"pm.environment.set(\"invoice_id\", randomId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/invoice_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"invoice_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"currency_ID\", responseJson.data[0][\"id\"]);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/currency",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "payment List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Get the data array containing IDs\r",
									"const responseData = responseJson.data;\r",
									"\r",
									"// Generate a random index within the array length\r",
									"const randomIndex = Math.floor(Math.random() * responseData.length);\r",
									"\r",
									"// Get the random ID from the randomly selected index\r",
									"const randomId = responseData[randomIndex].id;\r",
									"\r",
									"// Set the random ID as an environment variable named \"random_id\"\r",
									"pm.environment.set(\"payment_id\", randomId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/payment_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"payment_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organisational Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate a random number between 1 and 100 for cancellation_fee\r",
									"const cancellationFee = Math.floor(Math.random() * 100) + 1;\r",
									"\r",
									"// Log the generated random number to the console\r",
									"console.log('cancellation_fee_in_percent:', cancellationFee);\r",
									"\r",
									"// Set the cancellation fee in the global environment\r",
									"pm.globals.set('cancellation_fee_in_percent', cancellationFee);\r",
									"\r",
									"\r",
									"// Generate a random number between 1 and 100 for cancellation_fee\r",
									"const days = Math.floor(Math.random() * 22) + 0;\r",
									"\r",
									"// Log the generated random number to the console\r",
									"console.log('days:', days);\r",
									"\r",
									"// Set the cancellation fee in the global environment\r",
									"pm.globals.set('days', days);\r",
									"\r",
									"\r",
									"// Generate a random number between 1 and 100 for cancellation_fee\r",
									"const hours = Math.floor(Math.random() * 22) + 0;\r",
									"\r",
									"// Log the generated random number to the console\r",
									"console.log('hours:', hours);\r",
									"\r",
									"// Set the cancellation fee in the global environment\r",
									"pm.globals.set('hours', hours);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 8,\r\n    \"data\": [\r\n        {\r\n            \"app_name\": \"Pet Care App\",\r\n            \"subscriber_id\": 1,\r\n            \"beneficiary_type\": \"Pet\",\r\n            \"subtype_id\":{{beneficiary_subtype_ID}},\r\n            \"beneficiary_subtype\":\"Breed\",\r\n            \"beneficiary_login\": 0,\r\n            \"user_approval_configuration\": 1,\r\n            \"manual_approval\": 0,\r\n            \"organizational_name\": \"Pet Care Technology\",\r\n            \"currency_id\": {{currency_ID}},\r\n            \"minimum_cancellation_notice\": {\r\n                \"days\": {{days}},\r\n                \"hours\":{{hours}}\r\n            },\r\n            \"cancellation_fee_in_percent\": {{cancellation_fee_in_percent}},\r\n            \"cancellation_message\": \"Service not available \",\r\n            \"organization_logo\": \"https://staging-booking.agilecyber.com/files/files/1/user/MicrosoftTeams-image (33).png\",\r\n            \"invoice_id\": [\r\n                {{invoice_id}}\r\n            ],\r\n            \"payment_id\": [\r\n                {{payment_id}}\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=8",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"organization_ID\", responseJson.data[0][\"id\"]);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/organization_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"organization_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{organization_ID}},\r\n            \"app_name\": \"Pet Care App\",\r\n            \"subscriber_id\": 1,\r\n            \"beneficiary_type\": \"Pet\",\r\n           \"subtype_id\":{{beneficiary_subtype_ID}},\r\n            \"beneficiary_subtype\":\"Breed\",\r\n            \"beneficiary_login\": 0,\r\n            \"user_approval_configuration\": 1,\r\n            \"manual_approval\": 0,\r\n            \"organizational_name\": \"Pet Care Technology\",\r\n            \"currency_id\": {{currency_ID}},\r\n            \"minimum_cancellation_notice\": {\r\n               \"days\": {{days}},\r\n                \"hours\":{{hours}}\r\n            },\r\n            \"cancellation_fee_in_percent\": {{cancellation_fee_in_percent}},\r\n            \"cancellation_message\": \"Service not available \",\r\n            \"organization_logo\": \"https://staging-booking.agilecyber.com/files/files/1/user/MicrosoftTeams-image (33).png\",\r\n            \"invoice_id\": [\r\n                {{invoice_id}}\r\n            ],\r\n            \"payment_id\": [\r\n                {{payment_id}}\r\n            ]\r\n        }\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=8",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "8"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Slots",
			"item": [
				{
					"name": "Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/form-structure/fields/time_slots ",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form-structure",
								"fields",
								"time_slots "
							]
						}
					},
					"response": []
				},
				{
					"name": "Create time slot",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Time_SlotPrefixes = [\"Morning\", \"Noon\", \"Afternoon\", \"Evening\", \"Night\"];\r",
									"const Time_SlotDescriptors = [\"First\", \"Second\", \"Third\", \"Late\", \"Early\"]; // Add more descriptors as needed\r",
									"\r",
									"// Function to generate a random alphabet\r",
									"function generateRandomAlphabet() {\r",
									"    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    return alphabet[Math.floor(Math.random() * alphabet.length)];\r",
									"}\r",
									"\r",
									"// Function to get a random time slot name\r",
									"function getRandomTimeSlotName() {\r",
									"    const randomPrefixIndex = Math.floor(Math.random() * Time_SlotPrefixes.length);\r",
									"    const randomDescriptorIndex = Math.floor(Math.random() * Time_SlotDescriptors.length);\r",
									"\r",
									"    // Adding a single randomly generated alphabet\r",
									"    const randomAlphabet = generateRandomAlphabet();\r",
									"\r",
									"    const randomTimeSlot = `${Time_SlotDescriptors[randomDescriptorIndex]} ${Time_SlotPrefixes[randomPrefixIndex]} ${randomAlphabet}`;\r",
									"    return randomTimeSlot;\r",
									"}\r",
									"\r",
									"// Get a random time slot name\r",
									"const randomTimeSlot = getRandomTimeSlotName();\r",
									"\r",
									"// Set the random time slot name as a global environment variable\r",
									"pm.globals.set(\"random_time_slot\", randomTimeSlot);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{random_time_slot}}\",\r\n            \"description\": \"These time slots are commonly used for various pet services such as pet grooming, pet sitting, dog walking, veterinary appointments, and more. \"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Slot_id\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"Slot_name\", responseJson.data[0]['name']);\r",
									"postman.setEnvironmentVariable(\"Slot_id_delete\", responseJson.data[2]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/list/time_slots",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"time_slots"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update time slot",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\":{{Slot_id}},\r\n            \"name\": \"{{Slot_name}}\",\r\n            \"description\": \"These time slots are commonly used for various pet services such as pet grooming, pet sitting, dog walking, veterinary appointments\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit?form_id=2",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "form-structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/form-structure/fields/service",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"form-structure",
								"fields",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ServiceNamePart1 = [\"Pet Boarding\", \"Dog Walking\", \"Pet Sitting\", \"Veterinary Services\", \"Pet Grooming\"];\r",
									"\r",
									"// Function to generate a random alphabet\r",
									"function generateRandomAlphabet() {\r",
									"    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    return alphabet[Math.floor(Math.random() * alphabet.length)];\r",
									"}\r",
									"\r",
									"// Function to get a random service name\r",
									"function getRandomServiceName() {\r",
									"    const randomPart1Index = Math.floor(Math.random() * ServiceNamePart1.length);\r",
									"\r",
									"    // Adding a single randomly generated alphabet\r",
									"    const randomAlphabet = generateRandomAlphabet();\r",
									"\r",
									"    const randomServiceName = `${ServiceNamePart1[randomPart1Index]} ${randomAlphabet}`;\r",
									"    return randomServiceName;\r",
									"}\r",
									"\r",
									"// Get a random service name\r",
									"const randomService = getRandomServiceName();\r",
									"\r",
									"// Set the random service name as a global environment variable\r",
									"pm.globals.set(\"random_service_name\", randomService);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ServiceNamePart1 = [\"Pet Boarding\", \"Dog Walking\", \"Pet Sitting\", \"Veterinary Services\", \"Pet Grooming\"];\r",
									"const ServiceNamePart2 = [\"Training\", \"Daycare\", \"Transportation\", \"Photography\"];\r",
									"const ServiceNamePart3 = [\"Professional\", \"Elite\", \"Premium\", \"Specialized\", \"Customized\"];\r",
									"\r",
									"// Function to get a random service name\r",
									"function getRandomServiceName() {\r",
									"    const randomPart1Index = Math.floor(Math.random() * ServiceNamePart1.length);\r",
									"    const randomPart2Index = Math.floor(Math.random() * ServiceNamePart2.length);\r",
									"    const randomPart3Index = Math.floor(Math.random() * ServiceNamePart3.length);\r",
									"\r",
									"    const randomServiceName = `${ServiceNamePart1[randomPart1Index]} ${ServiceNamePart2[randomPart2Index]} ${ServiceNamePart3[randomPart3Index]}`;\r",
									"    return randomServiceName;\r",
									"}\r",
									"\r",
									"// Get a random service name\r",
									"const randomService = getRandomServiceName();\r",
									"\r",
									"// Set the random service name as a global environment variable\r",
									"pm.globals.set(\"random_service_name\", randomService);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\":\"{{random_service_name}}\",\r\n            \"image\": null,\r\n            \"description\": \"The pet services segment, including grooming, boarding, pet hotels, pet sitting, day care and other services, has been the fastest-growing\",\r\n            \"base_price\":{{base_price}},\r\n            \"enable_repeat_booking\": 1,\r\n            \"auto_approval_threshold_limit\": 2,\r\n            \"booking_beyond_capacity\": 60,\r\n            \"beneficiary_subtype_id\":[57],\r\n            \"beneficiary_age_limit_max\": {\r\n                \"year\": 5,\r\n                \"month\": 5\r\n            },\r\n            \"beneficiary_age_limit_min\": {\r\n                \"year\": 0,\r\n                \"month\": 5\r\n            },\r\n            \"advance_booking_requirement\": {\r\n                \"day\": 7\r\n            },\r\n            \"maximum_allowed_date_for_booking\": {\r\n                \"day\": 10\r\n            },\r\n            \"staff_handling_capacity\": 34,\r\n            \"service_availability\": 1,\r\n            \"available_date_from\": \"23-11-2023\",\r\n            \"available_date_to\": \"24-11-2024\",\r\n            \"time_slots_id\": [\r\n                {{Slot_id}}\r\n            ],\r\n            \"pricing_rule\":{\r\n    \"tiered_pricing\": [\r\n        {\r\n            \"Quantity\": 2,\r\n            \"pricing\": 55,\r\n            \"discount_in\": \"percentage\"\r\n        },\r\n        {\r\n            \"Quantity\": 3,\r\n            \"pricing\": 12,\r\n            \"discount_in\": \"percentage\"\r\n        }\r\n    ],\r\n    \"tag_pricing\": [\r\n        {\r\n            \"tag_id\": \"52\",\r\n            \"pricing\": 25,\r\n            \"discount_in\": \"percentage\"\r\n        },\r\n        {\r\n            \"tag_id\": \"76\",\r\n            \"pricing\": 27,\r\n            \"discount_in\": \"percentage\"\r\n        }\r\n    ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Service_id\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"Service_id1\", responseJson.data[5]['id']);\r",
									"\r",
									"postman.setEnvironmentVariable(\"service_name\", responseJson.data[0]['name']);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/list/service",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"{{Service_id}}\",\r\n            \"name\": \"{{service_name}}\",\r\n            \"image\": null,\r\n            \"description\": \"The pet services segment, including grooming, boarding, pet hotels, pet sitting, day care and other services, has been the fastest-growing\",\r\n            \"base_price\": {{base_price}},\r\n            \"enable_repeat_booking\": 1,\r\n            \"auto_approval_threshold_limit\": 2,\r\n            \"booking_beyond_capacity\": 60,\r\n            \"beneficiary_subtype_id\": [57],\r\n            \"beneficiary_age_limit_max\": {\r\n                \"year\": 5,\r\n                \"month\": 5\r\n            },\r\n            \"beneficiary_age_limit_min\": {\r\n                \"year\": 0,\r\n                \"month\": 5\r\n            },\r\n            \"advance_booking_requirement\": {\r\n                \"day\": 7\r\n            },\r\n            \"maximum_allowed_date_for_booking\": {\r\n                \"day\": 10\r\n            },\r\n            \"staff_handling_capacity\": 34,\r\n            \"service_availability\": 1,\r\n            \"available_date_from\": \"23-11-2023\",\r\n            \"available_date_to\": \"24-11-2024\",\r\n            \"time_slots_id\": [\r\n                {{Slot_id}}\r\n            ],\r\n            \"pricing_rule\":{\r\n    \"tiered_pricing\": [\r\n        {\r\n            \"Quantity\": 2,\r\n            \"pricing\": 55,\r\n            \"discount_in\": \"percentage\"\r\n        },\r\n        {\r\n            \"Quantity\": 3,\r\n            \"pricing\": 12,\r\n            \"discount_in\": \"percentage\"\r\n        }\r\n    ],\r\n    \"tag_pricing\": [\r\n        {\r\n            \"tag_id\": \"52\",\r\n            \"pricing\": 25,\r\n            \"discount_in\": \"percentage\"\r\n        },\r\n        {\r\n            \"tag_id\": \"76\",\r\n            \"pricing\": 27,\r\n            \"discount_in\": \"percentage\"\r\n        }\r\n    ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit?form_id=1",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tag Category",
			"item": [
				{
					"name": "form structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/form-structure/fields/add_tag_category",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"add_tag_category"
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"\r",
									" // Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Generate a random UUID\r",
									"var randomUUID = generateUUID();\r",
									"\r",
									"// Log the generated UUID\r",
									"console.log(\"Generated UUID:\", randomUUID);\r",
									"\r",
									"// Set the generated UUID as an environment variable if needed\r",
									"pm.environment.set(\"Tag_UUID\", randomUUID);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categoryNames = [\"dogs\", \"cats\", \"birds\", \"smallmammals\", \"fish\", \"reptiles\", \"amphibians\", \"farmanimals\", \"horses\"];\r",
									"\r",
									"// Function to generate a random alphabet\r",
									"function generateRandomAlphabet() {\r",
									"    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    return alphabet[Math.floor(Math.random() * alphabet.length)];\r",
									"}\r",
									"\r",
									"// Function to add extra random characters to the category name\r",
									"function addRandomCharacters(categoryName) {\r",
									"    const randomAlphabet = generateRandomAlphabet();\r",
									"    return `${categoryName}${randomAlphabet}`;\r",
									"}\r",
									"\r",
									"// Function to get a random category name with extra characters\r",
									"function getRandomCategoryName() {\r",
									"    const randomIndex = Math.floor(Math.random() * categoryNames.length);\r",
									"    const originalName = categoryNames[randomIndex];\r",
									"    return addRandomCharacters(originalName);\r",
									"}\r",
									"\r",
									"// Set the random category name as a variable in the global environment\r",
									"pm.globals.set(\"random_category_name\", getRandomCategoryName());\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 15,\r\n    \"data\": [\r\n        {\r\n            \"category_name\": \"{{random_category_name}}\",\r\n            \"category_type_id\": 1,\r\n            \"allowed_per_entity\": 1,\r\n            \"category_description\": \"Known for their loyalty and companionship, dogs come in various breeds and sizes, suitable for different lifestyles and living environments.\",\r\n            \"uuid\": \"{{Tag_UUID}}\",\r\n            \"subdata\": [\r\n                {\r\n                    \"name\": \"Reptiles and Amphibians\",\r\n                    \"description\": \"Reptiles, including snakes, lizards, turtles, and geckos, have specific care requirements, but they are chosen as pets for their unique appearances and behaviors.\",\r\n                    \"parent_uuid\": \"{{Tag_UUID}}\"\r\n                },\r\n                {\r\n                    \"name\": \"Domestic Pets\",\r\n                    \"description\": \"ndependent and affectionate, cats are popular pets appreciated for their playful behavior and ability to form bonds with their owners.\",\r\n                    \"parent_uuid\": \"{{Tag_UUID}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/form_submit",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Tag Category_ID\", responseJson.data[0][\"id\"]);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/list/add_tag_category",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"list",
								"add_tag_category"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"{{Tag Category_ID}}\",\r\n            \"category_name\": \"{{random_category_name}}\",\r\n            \"category_type_id\": 1,\r\n            \"allowed_per_entity\": 1,\r\n            \"category_description\": \"Known for their loyalty and companionship, dogs come in various breeds and sizes, suitable for different lifestyles and living environments.\",\r\n            \"uuid\": \"{{Tag_UUID}}\",\r\n            \"subdata\": [\r\n                {\r\n                    \"name\": \"Reptiles and Amphibians\",\r\n                    \"description\": \"Reptiles, including snakes, lizards, turtles, and geckos, have specific care requirements, but they are chosen as pets for their unique appearances and behaviors.\",\r\n                    \"parent_uuid\": \"{{Tag_UUID}}\"\r\n                },\r\n                {\r\n                    \"name\": \"Domestic Pets\",\r\n                    \"description\": \"ndependent and affectionate, cats are popular pets appreciated for their playful behavior and ability to form bonds with their owners.\",\r\n                    \"parent_uuid\": \"{{Tag_UUID}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/form_submit?form_id=15",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "15"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User details",
			"item": [
				{
					"name": "Form Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/form-structure/fields/user",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"User-email\", generateUniqueEmail()); \r",
									"\r",
									"\r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"User-firstname\", getRandomFirstName()); \r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal()); \r",
									"\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet()); \r",
									"\r",
									"\r",
									"const randomCities = [\r",
									"    \"London\", \"Manchester\", \"Birmingham\", \"Edinburgh\", \"Glasgow\", \"Liverpool\",\r",
									"    \"Bristol\", \"Belfast\", \"Cardiff\", \"Leeds\", \"Sheffield\", \"Newcastle upon Tyne\",\r",
									"    \"Nottingham\", \"Southampton\", \"Oxford\", \"Cambridge\", \"York\", \"Bath\", \"Aberdeen\",\r",
									"    \"Brighton\", \"Inverness\", \"Exeter\", \"Dundee\", \"Chester\", \"Stirling\", \"Portsmouth\"\r",
									"];\r",
									"\r",
									"function getRandomCity() {\r",
									"   const randomCityIndex = Math.floor(Math.random() * randomCities.length);\r",
									"   return randomCities[randomCityIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"City\", getRandomCity());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"profile_image\":null,\r\n            \"email\": \"{{User-email}}\",\r\n            \"first_name\": \"{{User-firstname}}\",\r\n            \"last_name\": \"CUSTOMER\",\r\n            \"country_id\": \"1\",\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"post_code\":\"{{postcode}}\",\r\n            \"user_preference\": 7,\r\n            \"payment_method_id\": {{payment_id}},\r\n            \"invoice_frequency_id\":{{invoice_id}}\r\n           \r\n            \r\n            \r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"user_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"user_ID_delete\", responseJson.data[1]['id']);\r",
									"postman.setEnvironmentVariable(\"e-mail\", responseJson.data[0]['email']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/user",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"User-email\", generateUniqueEmail()); \r",
									"\r",
									"\r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"User-firstname\", getRandomFirstName()); \r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal()); \r",
									"\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet()); \r",
									"\r",
									"\r",
									"const randomCities = [\r",
									"    \"London\", \"Manchester\", \"Birmingham\", \"Edinburgh\", \"Glasgow\", \"Liverpool\",\r",
									"    \"Bristol\", \"Belfast\", \"Cardiff\", \"Leeds\", \"Sheffield\", \"Newcastle upon Tyne\",\r",
									"    \"Nottingham\", \"Southampton\", \"Oxford\", \"Cambridge\", \"York\", \"Bath\", \"Aberdeen\",\r",
									"    \"Brighton\", \"Inverness\", \"Exeter\", \"Dundee\", \"Chester\", \"Stirling\", \"Portsmouth\"\r",
									"];\r",
									"\r",
									"function getRandomCity() {\r",
									"   const randomCityIndex = Math.floor(Math.random() * randomCities.length);\r",
									"   return randomCities[randomCityIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"City\", getRandomCity());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{user_ID}},\r\n            \"profile_image\": null,\r\n            \"email\": \"{{e-mail}}\",\r\n            \"first_name\": \"{{User-firstname}}\",\r\n            \"last_name\": \"CUSTOMER\",\r\n            \"country_id\": \"1\",\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"user_preference\": 7,\r\n            \"payment_method_id\": {{payment_id}},\r\n            \"invoice_frequency_id\": {{invoice_id}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=2",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin user Approve",
			"item": [
				{
					"name": "unapproved list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"user_id\", responseJson.data[0]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/unapprove",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"unapprove"
							]
						}
					},
					"response": []
				},
				{
					"name": "approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{Url}}user/{{user_id}}/role/approve",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"{{user_id}}",
								"role",
								"approve"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Beneficiary",
			"item": [
				{
					"name": "structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/user/form-structure/fields/my_beneficiary",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form-structure",
								"fields",
								"my_beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "form_submit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 7,\r\n    \"data\": [\r\n        {\r\n            \"parent_id\": 1588,\r\n            \"uuid\": \"{{random_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{random_uuid}}\",\r\n            \"dob\": \"2021-03-12\",\r\n            \"gender_id\": 1,\r\n            \"pet_type\": null,\r\n            \"size\": null,\r\n            \"dog_lead\": 1,\r\n            \"subtype_id\": 57,\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": null,\r\n            \"allergies\": null,\r\n            \"vet_name\": \"null\",\r\n            \"vet_address\": \"null\",\r\n            \"vet_phone\": \"\",\r\n            \"microchip_id\": null,\r\n            \"emergency_contact_name\": null,\r\n            \"emergency_contact_phone\": null,\r\n            \"special_instructions\": null,\r\n            \"feeding_schedules\": null,\r\n            \"additional_contacts\": null,\r\n            \"medical_records\": null,\r\n            \"latest_vaccination_date\": \"2019-03-12\",\r\n            \"next_vaccine_date\": \"2019-03-12\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"parent_ID\", responseJson.data[0]['parent_id']);\r",
									"postman.setEnvironmentVariable(\"update_uuid\", responseJson.data[0]['uuid']);\r",
									"postman.setEnvironmentVariable(\"update_parent_uuid\", responseJson.data[0]['parent_uuid']);\r",
									"// postman.setEnvironmentVariable(\"beneficiary_ID1\", responseJson.data[12]['id']);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/list/my_beneficiary",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"my_beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{beneficiary_ID}},\r\n            \"parent_id\": 1588,\r\n            \"uuid\": \"{{update_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{update_parent_uuid}}\",\r\n            \"dob\": \"2021-03-12\",\r\n            \"gender_id\": 1,\r\n            \"pet_type\": null,\r\n            \"size\": null,\r\n            \"dog_lead\": 1,\r\n            \"subtype_id\": 57,\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": null,\r\n            \"allergies\": null,\r\n            \"vet_name\": \"null\",\r\n            \"vet_address\": \"null\",\r\n            \"vet_phone\": \"\",\r\n            \"microchip_id\": null,\r\n            \"emergency_contact_name\": null,\r\n            \"emergency_contact_phone\": null,\r\n            \"special_instructions\": null,\r\n            \"feeding_schedules\": null,\r\n            \"additional_contacts\": null,\r\n            \"medical_records\": null,\r\n            \"latest_vaccination_date\": \"2019-03-12\",\r\n            \"next_vaccine_date\": \"2019-03-12\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=7",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "7"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin Beneficiary",
			"item": [
				{
					"name": "structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/user/form-structure/fields/beneficiary",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form-structure",
								"fields",
								"beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "form_submit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 4,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"parent_id\": 1622,\r\n            \"uuid\": \"{{random_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{random_uuid}}\",\r\n            \"dob\": \"12-09-2021\",\r\n            \"gender_id\": 2,\r\n            \"pet_type\": null,\r\n            \"size\": null,\r\n            \"dog_lead\":1,\r\n            \"is_suspended\":0,\r\n            \"subtype_id\": \"46\",\r\n            \"behaviour_id\": [1,2],\r\n            \"dietary_issues\": null,\r\n            \"allergies\": null,\r\n            \"vet_name\": null,\r\n            \"vet_address\": null,\r\n            \"vet_phone\": \"\",\r\n            \"microchip_id\": null,\r\n            \"emergency_contact_name\": null,\r\n            \"emergency_contact_phone\": null,\r\n            \"special_instructions\": null,\r\n            \"feeding_schedules\": null,\r\n            \"additional_contacts\": null,\r\n            \"medical_records\": null\r\n           \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/form_submit",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Admin_beneficiary_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"Admin_parent_ID\", responseJson.data[0]['parent_id']);\r",
									"postman.setEnvironmentVariable(\"Admin_update_uuid\", responseJson.data[0]['uuid']);\r",
									"postman.setEnvironmentVariable(\"Admin_update_parent_uuid\", responseJson.data[0]['parent_uuid']);\r",
									"// postman.setEnvironmentVariable(\"beneficiary_ID1\", responseJson.data[12]['id']);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/list/beneficiary?parent_id=1622",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary"
							],
							"query": [
								{
									"key": "parent_id",
									"value": "1622"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"Admin_random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"Admin_random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 4,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"id\":\"{{Admin_beneficiary_ID}}\",\r\n            \"parent_id\": 1642,\r\n            \"uuid\": \"{{Admin_random_uuid}}\",\r\n            \"first_name\": \"{{Admin_random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{Admin_random_uuid}}\",\r\n            \"dob\": \"12-09-2021\",\r\n            \"gender_id\": 2,\r\n            \"pet_type\": null,\r\n            \"size\": null,\r\n            \"dog_lead\":1,\r\n            \"is_suspended\":0,\r\n            \"subtype_id\": \"46\",\r\n            \"behaviour_id\": [1,2],\r\n            \"dietary_issues\": null,\r\n            \"allergies\": null,\r\n            \"vet_name\": null,\r\n            \"vet_address\": null,\r\n            \"vet_phone\": \"\",\r\n            \"microchip_id\": null,\r\n            \"emergency_contact_name\": null,\r\n            \"emergency_contact_phone\": null,\r\n            \"special_instructions\": null,\r\n            \"feeding_schedules\": null,\r\n            \"additional_contacts\": null,\r\n            \"medical_records\": null\r\n           \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=4",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Staff details",
			"item": [
				{
					"name": "form-structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/form-structure/fields/staff",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form-structure",
								"fields",
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"Staff-email\", generateUniqueEmail());\r",
									" \r",
									" \r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"Staff-firstname\", getRandomFirstName());\r",
									" \r",
									"//Lastname\r",
									"// List of last names\r",
									"const lastNames = [\r",
									"    \"Jones\", \"Williams\", \"Taylor\", \"Brown\",\r",
									"    \"Davies\", \"Evans\", \"Patel\", \"Wilson\", \"Johnson\",\r",
									"    \"Singh\", \"Wright\", \"Robinson\", \"Thompson\", \"White\",\r",
									"    \"Walker\", \"Hall\", \"Green\"\r",
									"];\r",
									" \r",
									"// Function to get a random last name\r",
									"function getRandomLastName() {\r",
									"    const randomIndex = Math.floor(Math.random() * lastNames.length);\r",
									"    return lastNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random last name as a variable\r",
									"pm.variables.set(\"Staff-lastname\", getRandomLastName());\r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal());\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet());\r",
									"\r",
									"\r",
									"const randomStaff = [\r",
									"    \"AB12\", \"EF34\", \"IJ56\", \"MN78\", \"QR90\", \"UV12\", \"YZ34\",\r",
									"    \"BC67\", \"GH89\", \"KL01\", \"OP23\", \"ST45\", \"WX67\", \"DE89\",\r",
									"    \"IJ11\", \"MN23\", \"QR45\", \"UV67\", \"YZ89\", \"FG01\", \"KL34\",\r",
									"    \"OP56\", \"ST78\", \"WX90\", \"AB23\", \"DE45\", \"IJ67\", \"MN89\",\r",
									"    \"QR12\", \"UV34\"\r",
									"];\r",
									" \r",
									"function getRandomStaffCode() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomStaff.length);\r",
									"    return randomStaff[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"staff_code\", getRandomStaffCode());\r",
									"\r",
									"\r",
									"\r",
									"const city = [\r",
									"    \"Birmingham\",\"Bradford\",\"Brighton & Hove\",\"Bristol\",\"Cambridge\",\"Cambridge\",\"Canterbury\",\"Carlisle\",\"Chelmsford\",\"Chester\",\"Chichester\",\"Colchester\",\"Coventry\",\"Derby\",\"Doncaster\",\"Durham\",\"Kingston\",\"Gloucester\",\"Hereford\",\r",
									"\"York\",\"Lancaster\",\"Leeds\",\"Leicester\",\"Lichfield\", \"Lincoln\", \"Liverpool\", \"London\",\"Manchester\"\r",
									"\r",
									"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomcity() {\r",
									"    const randomIndex = Math.floor(Math.random() * city.length);\r",
									"    return city[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"city\", getRandomcity());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"profile_image\": \"https://staging-booking.agilecyber.com/files/files/1/calender/download (1) (3).jpeg\",\r\n            \"email\": \"{{Staff-email}}\",\r\n            \"first_name\": \"{{Staff-firstname}}\",\r\n            \"last_name\": \"{{Staff-lastname}}\",\r\n            \"staff_id\": \"{{staff_code}}\",\r\n            \"gender_id\": 1,\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"alternate_phone_number\": \"44 1234567467\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"service_id\": [{{Service_id}}]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Staffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/list/staff",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"list",
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"data\": [\r\n        {   \"id\": \"{{STAFF_ID}}\",\r\n            \"profile_image\": \"https://dev-booking.agilecyber.com/files/files/1/user/Screenshot 2023-11-08 123214.png\",\r\n             \"email\": \"{{email}}\",\r\n            \"first_name\": \"{{firstname}}\",\r\n            \"last_name\": \"{{lastname}}\",\r\n            \"staff_id\": \"{{staff}}\",\r\n            \"gender_id\": 1,\r\n            \"phone_number\": \"+44123456789\",\r\n            \"alternate_phone_number\": \"+44123456789\",\r\n            \"address_1\": \"76c\",\r\n            \"address_2\": \"1332\",\r\n            \"city\": \"city\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"DR5 0RT\",\r\n            \"service_id\": [\r\n                36\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit?form_id=1",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "User  Booking",
					"item": [
						{
							"name": "structure booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											";"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/structure/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"structure",
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "create regular booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"beneficiary_id\": [{{beneficiary_ID}}],\r\n            \"service_id\":{{Service_id}},\r\n            \"booking_type_id\":1,\r\n            \"booking_date\": [\r\n                {\r\n                    \"date\": \"2024-01-05\",\r\n                    \"slot_id\": {{Slot_id}}\r\n                }\r\n            ],\r\n            \"notes\": \"Celebrating a special occasion—any surprises welcome! Happy bookings\",\r\n            \"booking_group_id\": null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "My Bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var responseJson = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Booking_ID\", responseJson.data[0][\"id\"]);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/booking/my_bookings",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"my_bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "status list API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/status",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create multiple booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"beneficiary_id\": [{{beneficiary_ID}}],\r\n            \"service_id\": {{Service_id}},\r\n            \"booking_type_id\": 2,\r\n            \"booking_date\": [\r\n                {\r\n                    \"date\": \"2024-01-06\",\r\n                    \"slot_id\": {{Slot_id}}\r\n                },\r\n                {\r\n                    \"date\": \"2024-01-07\",\r\n                    \"slot_id\": {{Slot_id}}\r\n                }\r\n            ],\r\n            \"notes\": \"To book a pet service, contact the provider, specify your pet's details and service needs, confirm availability, discuss pricing, and provide contact information. Once details are agreed upon, receive a booking confirmation outlining terms and conditions.\",\r\n            \"booking_group_id\": null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Previous",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/my_bookings?filter_type=\"previous\"",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"my_bookings"
									],
									"query": [
										{
											"key": "filter_type",
											"value": "\"previous\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Next",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/my_bookings?filter_type=\"upcoming\"",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"my_bookings"
									],
									"query": [
										{
											"key": "filter_type",
											"value": "\"upcoming\""
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{refresh_token1}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin Booking Workflow",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/booking/list/bookings",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"list",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status assigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=assigned",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "assigned"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status unassigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"Booking_ID\", pm.response.json().data[0].services[0].slots[0].Bookings[0].id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=unassigned",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "unassigned"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking Aproved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\": {{Booking_ID}},\r\n    \"status\": \"Approved\",\r\n   \"staff_id\": \"{{STAFF_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/booking/status_update",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"status_update"
									]
								}
							},
							"response": []
						},
						{
							"name": "List by service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?service={{Service_id}}",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "service",
											"value": "{{Service_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by Date&Slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?slot={{Slot_id}}",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "slot",
											"value": "{{Slot_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "assign staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\": {{Booking_ID}},\r\n    \"status\": \"unassigned\",\r\n    \"staff_id\":{{STAFF_ID}}\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/status_update",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"status_update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\" : {{Booking_ID}},\r\n    \"status\": \"rejected\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/status_update",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"status_update"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{Admin_refresh_token1}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Beneficiary delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{beneficiary_ID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=3",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff Delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"{{STAFF_ID}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit/bulk?form_id=1",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User reject",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{Url}}user/{{user_ID}}/role/approve",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"{{user_ID}}",
								"role",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tag Category Delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{Tag Category_ID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=15",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [{{user_ID_delete}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=13",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Time_Slot_delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " \r\n{\r\n    \"ids\": [\r\n        {{Slot_id_delete}}\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit/bulk?form_id=2",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Service delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{Service_id}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=1",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}